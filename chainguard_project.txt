# Project Structure
```
chainguard/
├── chainguard/
│   ├── __init__.py
│   ├── cli.py
│   ├── audit.py
│   ├── tea_integration.py
├── dashboard/
│   ├── __init__.py
│   ├── app.py
│   ├── templates/
│   │   ├── dashboard.html
│   │   ├── analytics.html
│   │   ├── submit.html
│   ├── static/
│   │   ├── styles.css
│   │   ├── analytics.js
├── tests/
│   ├── __init__.py
│   ├── test_cli.py
│   ├── test_tea_integration.py
├── docs/
│   ├── usage.md
├── tea.yaml
├── config.yaml
├── requirements.txt
├── README.md
├── LICENSE
├── chainguard.log
```

# File Contents

## chainguard/__init__.py
```python
"""ChainGuard: A decentralized dependency auditing tool for the Tea Protocol."""
__version__ = "1.0.0"
```

## chainguard/cli.py
```python
"""Command-line interface for ChainGuard using Click."""
import click
import json
import logging
from .audit import audit_package
from .tea_integration import TeaProtocolClient, submit_vulnerability, get_package_metadata

# Configure logging
logging.basicConfig(
    filename="chainguard.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

@click.group()
@click.option('--verbose', is_flag=True, help="Enable verbose logging")
def cli(verbose):
    """ChainGuard CLI for dependency auditing and Tea Protocol integration."""
    if verbose:
        logging.getLogger().setLevel(logging.DEBUG)

@cli.command()
@click.option('--package', required=True, help="Name of the PyPI package to audit")
def audit(package):
    """Audit a PyPI package for vulnerabilities using pip-audit."""
    try:
        result = audit_package(package)
        click.echo(json.dumps(result, indent=2))
        logging.info(f"Audited package: {package}")
    except Exception as e:
        logging.error(f"Error auditing package {package}: {str(e)}")
        click.echo(f"Error: {str(e)}", err=True)

@cli.command()
@click.option('--package', required=True, help="Name of the package to generate report for")
def report(package):
    """Fetch package teaRank and dependency graph from Tea Protocol."""
    try:
        client = TeaProtocolClient()
        metadata = client.get_package_metadata(package)
        click.echo(json.dumps(metadata, indent=2))
        logging.info(f"Generated report for package: {package}")
    except Exception as e:
        logging.error(f"Error generating report for {package}: {str(e)}")
        click.echo(f"Error: {str(e)}", err=True)

@cli.command()
@click.option('--package', required=True, help="Name of the package with vulnerability")
@click.option('--description', required=True, help="Description of the vulnerability")
def submit_vuln(package, description):
    """Submit a vulnerability report with TEA token staking."""
    try:
        client = TeaProtocolClient()
        result = client.submit_vulnerability(package, description)
        click.echo(f"Vulnerability submitted: {result}")
        logging.info(f"Submitted vulnerability for {package}")
    except Exception as e:
        logging.error(f"Error submitting vulnerability for {package}: {str(e)}")
        click.echo(f"Error: {str(e)}", err=True)

if __name__ == "__main__":
    cli()
```

## chainguard/audit.py
```python
"""Module for auditing PyPI packages using pip-audit."""
import subprocess
import json
import logging

def audit_package(package_name):
    """
    Audit a PyPI package for vulnerabilities using pip-audit.

    Args:
        package_name (str): Name of the PyPI package to audit.

    Returns:
        dict: Audit results including package name, version, and vulnerabilities.

    Raises:
        subprocess.CalledProcessError: If pip-audit command fails.
        ValueError: If package name is invalid.
    """
    try:
        # Run pip-audit command
        result = subprocess.run(
            ["pip-audit", "--json", package_name],
            capture_output=True,
            text=True,
            check=True
        )
        audit_data = json.loads(result.stdout)
        logging.debug(f"pip-audit result for {package_name}: {audit_data}")
        return {
            "package": package_name,
            "version": audit_data.get("version", "unknown"),
            "vulnerabilities": audit_data.get("vulnerabilities", [])
        }
    except subprocess.CalledProcessError as e:
        logging.error(f"pip-audit failed for {package_name}: {e.stderr}")
        raise ValueError(f"Failed to audit package {package_name}: {e.stderr}")
    except json.JSONDecodeError:
        logging.error(f"Invalid JSON output from pip-audit for {package_name}")
        raise ValueError("Invalid audit output")
```

## chainguard/tea_integration.py
```python
"""Mock Tea Protocol integration for ChainGuard."""
import yaml
import logging
import requests

class TeaProtocolClient:
    """
    Mock client for interacting with the Tea Protocol.

    Attributes:
        config (dict): Configuration loaded from config.yaml.
    """
    def __init__(self):
        """Initialize the Tea Protocol client with configuration."""
        try:
            with open("config.yaml", "r") as f:
                self.config = yaml.safe_load(f)
            logging.info("Initialized Tea Protocol client")
        except FileNotFoundError:
            logging.error("config.yaml not found")
            raise FileNotFoundError("Configuration file config.yaml not found")

    def get_package_metadata(self, package_name):
        """
        Fetch package metadata and teaRank from Tea Protocol.

        Args:
            package_name (str): Name of the package.

        Returns:
            dict: Package metadata including teaRank and dependency graph.
        """
        try:
            # Mock API call to Tea Protocol
            response = {
                "package": package_name,
                "teaRank": 0.85,  # Mock teaRank score
                "dependencies": ["dependency1", "dependency2"],
                "dependents": ["dependent1"]
            }
            logging.debug(f"Fetched metadata for {package_name}: {response}")
            return response
        except Exception as e:
            logging.error(f"Error fetching metadata for {package_name}: {str(e)}")
            raise

    def submit_vulnerability(self, package_name, description):
        """
        Submit a vulnerability report with TEA token staking.

        Args:
            package_name (str): Name of the package.
            description (str): Vulnerability description.

        Returns:
            str: Transaction ID or confirmation message.
        """
        try:
            # Mock Tea Protocol submission
            response = f"Submitted vulnerability for {package_name}: {description}"
            logging.debug(f"Submitted vulnerability: {response}")
            return response
        except Exception as e:
            logging.error(f"Error submitting vulnerability for {package_name}: {str(e)}")
            raise

    def manage_treasury(self):
        """
        Manage on-chain treasury for TEA token rewards.

        Returns:
            dict: Treasury status.
        """
        try:
            # Mock treasury management
            return {"treasury_address": self.config["tea"]["treasury_address"], "balance": 1000}
        except Exception as e:
            logging.error(f"Error managing treasury: {str(e)}")
            raise
```

## dashboard/app.py
```python
"""Flask-based web dashboard for ChainGuard."""
from flask import Flask, render_template, request, jsonify
from flask_httpauth import HTTPBasicAuth
from chainguard.audit import audit_package
from chainguard.tea_integration import TeaProtocolClient
import logging

app = Flask(__name__)
auth = HTTPBasicAuth()
logging.basicConfig(
    filename="chainguard.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# Mock users for basic auth
users = {"admin": "password123"}

@auth.verify_password
def verify_password(username, password):
    """Verify HTTP Basic Auth credentials."""
    return users.get(username) == password

@app.route("/dashboard")
@auth.login_required
def dashboard():
    """Render dashboard with audited packages."""
    try:
        client = TeaProtocolClient()
        packages = ["requests", "flask"]  # Mock package list
        data = []
        for pkg in packages:
            audit_result = audit_package(pkg)
            metadata = client.get_package_metadata(pkg)
            data.append({
                "package": pkg,
                "teaRank": metadata["teaRank"],
                "vulnerabilities": len(audit_result["vulnerabilities"])
            })
        logging.info("Rendered dashboard")
        return render_template("dashboard.html", packages=data)
    except Exception as e:
        logging.error(f"Error rendering dashboard: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/analytics")
@auth.login_required
def analytics():
    """Render dependency graph visualization."""
    try:
        client = TeaProtocolClient()
        package = request.args.get("package", "requests")
        metadata = client.get_package_metadata(package)
        logging.info(f"Rendered analytics for {package}")
        return render_template("analytics.html", package=package, dependencies=metadata["dependencies"])
    except Exception as e:
        logging.error(f"Error rendering analytics: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/submit", methods=["GET", "POST"])
@auth.login_required
def submit_vuln():
    """Handle vulnerability submission form."""
    if request.method == "POST":
        try:
            package = request.form["package"]
            description = request.form["description"]
            client = TeaProtocolClient()
            result = client.submit_vulnerability(package, description)
            logging.info(f"Submitted vulnerability via web for {package}")
            return jsonify({"message": result})
        except Exception as e:
            logging.error(f"Error submitting vulnerability via web: {str(e)}")
            return jsonify({"error": str(e)}), 500
    return render_template("submit.html")

if __name__ == "__main__":
    app.run(debug=True)
```

## dashboard/templates/dashboard.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>ChainGuard Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <div class="container">
        <h1>ChainGuard Dashboard</h1>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Package</th>
                    <th>teaRank</th>
                    <th>Vulnerabilities</th>
                </tr>
            </thead>
            <tbody>
                {% for pkg in packages %}
                <tr>
                    <td>{{ pkg.package }}</td>
                    <td>{{ pkg.teaRank }}</td>
                    <td>{{ pkg.vulnerabilities }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</body>
</html>
```

## dashboard/templates/analytics.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>ChainGuard Analytics</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/static/styles.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
</head>
<body>
    <div class="container">
        <h1>Dependency Graph for {{ package }}</h1>
        <canvas id="depGraph"></canvas>
    </div>
    <script>
        const ctx = document.getElementById('depGraph').getContext('2d');
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: {{ dependencies|tojson }},
                datasets: [{
                    label: 'Dependencies',
                    data: Array({{ dependencies|length }}).fill(1),
                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']
                }]
            }
        });
    </script>
</body>
</html>
```

## dashboard/templates/submit.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>Submit Vulnerability</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <div class="container">
        <h1>Submit Vulnerability</h1>
        <form id="vulnForm">
            <div class="mb-3">
                <label for="package" class="form-label">Package Name</label>
                <input type="text" class="form-control" id="package" name="package" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>
    <script>
        document.getElementById('vulnForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const response = await fetch('/submit', {
                method: 'POST',
                body: formData
            });
            const result = await response.json();
            alert(result.message || result.error);
        });
    </script>
</body>
</html>
```

## dashboard/static/styles.css
```css
body {
    padding: 20px;
}
.container {
    max-width: 800px;
}
```

## tests/test_cli.py
```python
."""Unit tests for ChainGuard CLI."""
import pytest
from click.testing import CliRunner
from chainguard.cli import cli

def test_audit_command():
    """Test the audit command."""
    runner = CliRunner()
    result = runner.invoke(cli, ["audit", "--package", "requests"])
    assert result.exit_code == 0
    assert "package" in result.output

def test_report_command():
    """Test the report command."""
    runner = CliRunner()
    result = runner.invoke(cli, ["report", "--package", "requests"])
    assert result.exit_code == 0
    assert "teaRank" in result.output

def test_submit_vuln_command():
    """Test the submit-vuln command."""
    runner = CliRunner()
    result = runner.invoke(cli, ["submit-vuln", "--package", "requests", "--description", "Test vuln"])
    assert result.exit_code == 0
    assert "Submitted vulnerability" in result.output
```

## tests/test_tea_integration.py
```python
"""Unit tests for Tea Protocol integration."""
import pytest
from chainguard. Hoechst tea_integration import TeaProtocolClient

def test_tea_client_init():
    """Test TeaProtocolClient initialization."""
    client = TeaProtocolClient()
    assert client.config is not None

def test_get_package_metadata():
    """Test fetching package metadata."""
    client = TeaProtocolClient()
    metadata = client.get_package_metadata("requests")
    assert "teaRank" in metadata
    assert "dependencies" in metadata
```

## tea.yaml
```yaml
project:
  name: ChainGuard
  description: A decentralized dependency auditing tool for OSS security
  repository: https://github.com/username/chainguard
  package_manager: pypi
governance:
  codeOwners:
    - address: tea1x2y3z4
      github: user1
    - address: tea5a6b7c
      github: user2
  requiredVotes: 2
  totalContributors: 2
treasury:
  address: tea_treasury_123
  rewardDistribution: equal
metadata:
  version: 1.0.0
  license: MIT
  keywords: [security, dependencies, tea-protocol]
```

## config.yaml
```yaml
tea:
  wallet_address: tea1x2y3z4
  treasury_address: tea_treasury_123
  api_endpoint: https://api.tea.xyz/v1
```

## requirements.txt
```
pip-audit==2.6.1
click==8.1.7
flask==3.0.3
requests==2.32.3
pyyaml==6.0.1
pytest==8.3.2
flask-httpauth==4.8.0
```

## README.md
```markdown
# ChainGuard

ChainGuard is a decentralized, open-source dependency auditing tool integrated with the Tea Protocol for secure package management and TEA token rewards.

## Setup Instructions

1. Clone the repository:
   ```bash
   git clone https://github.com/username/chainguard.git
   cd chainguard
   ```

2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

3. Configure Tea Protocol credentials in `config.yaml`.

4. Run the CLI:
   ```bash
   python -m chainguard.cli --help
   ```

5. Run the web dashboard:
   ```bash
   python -m dashboard.app
   ```

## CLI Usage

- Audit a package for vulnerabilities:
  ```bash
  chainguard audit --package requests
  ```

- Generate a package report with teaRank:
  ```bash
  chainguard report --package requests
  ```

- Submit a vulnerability report:
  ```bash
  chainguard submit-vuln --package requests --description "XSS vulnerability in version 2.0.18"
  ```

- Enable verbose logging:
  ```bash
  chainguard --verbose audit --package requests
  ```

## Web Dashboard

Access the dashboard at `http://localhost:5000/dashboard` (username: `admin`, password: `password123`).

- **/dashboard**: View audited packages and their teaRank scores.
- **/analytics**: Visualize dependency graphs.
- **/submit**: Submit vulnerability reports.

## Tea Protocol Integration

ChainGuard integrates with the Tea Protocol for:
- Fetching package metadata and teaRank scores.
- Submitting vulnerability reports with TEA token staking.
- Managing the project treasury for rewards.

See `tea.yaml` for project metadata and governance settings.

## Testing

Run unit tests with:
```bash
pytest
```

## Contributing

Contributions are welcome! Please see the [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.
```

## docs/usage.md
```markdown
# ChainGuard Usage Guide

## CLI Commands

### Audit a Package
```bash
chainguard audit --package <package-name>
```
Scans a PyPI package for vulnerabilities using pip-audit. Outputs a JSON report with package details and vulnerabilities.

### Generate a Report
```bash
chainguard report --package <package-name>
```
Fetches the package's teaRank and dependency graph from the Tea Protocol. Outputs a JSON report.

### Submit a Vulnerability
```bash
chainguard submit-vuln --package <package-name> --description <vuln-description>
```
Submits a vulnerability report to the Tea Protocol with TEA token staking.

### Verbose Logging
Add `--verbose` to any command for detailed logs:
```bash
chainguard --verbose audit --package requests
```

## Web Dashboard

Run the dashboard:
```bash
python -m dashboard.app
```

Access at `http://localhost:5000` with credentials (admin/password123).

- **Dashboard**: Lists audited packages, teaRank scores, and vulnerabilities.
- **Analytics**: Visualizes dependency graphs using Chart.js.
- **Submit**: Form to submit vulnerability reports.

## Configuration

Edit `config.yaml` to set Tea Protocol credentials:
```yaml
tea:
  wallet_address: your_tea_wallet_address
  treasury_address: your_treasury_address
  api_endpoint: https://api.tea.xyz/v1
```

## Logging

All actions are logged to `chainguard.log` with timestamps.
```

## LICENSE
```
MIT License

Copyright (c) 2025 ChainGuard Contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```